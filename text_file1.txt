Object Databases
git.Repo instances are powered by its object database instance which will be used when extracting any data, or when writing new objects.

The type of the database determines certain performance characteristics, such as the quantity of objects that can be read per second, the resource usage when reading large data files, as well as the average memory footprint of your application.

GitDB
The GitDB is a pure-python implementation of the git object database. It is the default database to use in GitPython 0.3. It uses less memory when handling huge files, but will be 2 to 5 times slower when extracting large quantities of small objects from densely packed repositories:

repo = Repo("path/to/repo", odbt=GitDB)
GitCmdObjectDB
The git command database uses persistent git-cat-file instances to read repository information. These operate very fast under all conditions, but will consume additional memory for the process itself. When extracting large files, memory usage will be much higher than GitDB:

repo = Repo("path/to/repo", odbt=GitCmdObjectDB)
Git Command Debugging and Customization
Using environment variables, you can further adjust the behaviour of the git command.

GIT_PYTHON_TRACE
If set to non-0, all executed git commands will be shown as they happen
If set to full, the executed git command _and_ its entire output on stdout and stderr will be shown as they happen
NOTE: All logging is outputted using a Python logger, so make sure your program is configured to show INFO-level messages. If this is not the case, try adding the following to your program:

import logging
logging.basicConfig(level=logging.INFO)
